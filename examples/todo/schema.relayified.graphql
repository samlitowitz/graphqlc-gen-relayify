schema {
  query: MyQuery
  mutation: MyMutation
}

directive @hasRole(role: Role!) on FIELD_DEFINITION

scalar Map

type MyQuery {
  todo(id: ID!): Todo
  lastTodo: Todo
  todos(first: Int, after: String!, last: Int, before: String!): TodoConnection
  node(id: ID!): Node!
}

type MyMutation {
  createTodo(todo: TodoInput!): Todo!
  updateTodo(id: ID!, changes: Map!): Todo
}

type Todo implements Node {
  id: ID!
  owner: User!
  text: String!
  done: Boolean! @hasRole(role: OWNER)
}

type User implements Node {
  login: String!
  todos(first: Int, after: String!, last: Int, before: String!): TodoConnection
  id: ID!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type TodoEdge {
  node: Todo
  cursor: String!
}

type TodoConnection {
  edge: [TodoEdge]
  PageInfo: PageInfo!
}

interface Node {
  id: ID!
}

enum Role {
  ADMIN
  OWNER
}

input TodoInput {
  text: String!
  done: Boolean
}
